{-
# Haskell

learn haskell
????
PROFIT


Scheme: reified pure λ Calculus
		simple as possible syntax
		simple as possible semantics
		- eager order eval
		- not pure (durty): I/O Procedure, (set! v 3),..

Haskell: reified typed λ calculus
		strongly typed, polymorphic types
		pure (I/O and mutation via "monads")
		syntax as much like maths as possible
		- cancer of the semicolon. profusion of syntax
		algebraic data types (unify structures, unions, enums)
-}

fib :: Integer -> Integer
fib 0 = 1
fib 1 = 1
fib n = fib (n-1) - fib (n-2)

fib1 n = if n==0 then 1 else if n==1 then 1 else fib1 (n-1) + fib1 (n-2)

--sugared
fib1 n =
	if n==0
		then 1
	else if n==1
		then 1
	else
--      func	   op
		fib1 (n-1) + fib1 (n-2)
-- op can become function:
-- (+) 2 3 is the same as (2 + 3)

hypot x y = sqrt (x^2 + y^2)
-- hypot 3 4
--> 5

(+++) x y = hypot x y
--or
(+++) = hypot --Beta reduction

--Constant function: takes two arguments and returns the first
const "foo" pi
--> foo

----Syntax for lists:
--like prolog in that it uses square brackets

--constructor
'f' : "ubar"
--> fubar
['f','u','b','a','r']
--> fubar


-- Does pattern matching on arguments to functions
head' (h:_) = h
tail; (_:t) = t
-- doesnt exhaustively match on all patterns (empty lists)

repeat' x = x:repeat' x
repeat'' x = 
	let xs = repeat'' x
	in x:xs

threePis = [pi,pi,pi]

fibs = 1:1:fibs2
-- 1:1:fibs2
-- 1:fibs2
fibs 2 = zipWith (+) fibs (drop 1 fibs)
-- 'drop' drops the first element of the list

map; f [] = []
map' f(x:xs) = f x:map' f xs
